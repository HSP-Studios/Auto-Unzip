name: Archive Extraction Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch: {}

jobs:
  test-archives:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install system deps (rar, p7zip, cabextract)
        run: |
          sudo apt-get update -y
          sudo apt-get install -y p7zip-full p7zip-rar cabextract rar

      - name: Install Python dependencies
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt

      - name: Create fixture source file
        run: |
          mkdir -p build/fixtures
          echo "hello world" > build/fixtures/hello.txt

      - name: Build test archives
        run: |
          set -e
          cd build/fixtures
          # zip
          zip ../test-zip.zip hello.txt
          # 7z
          7z a ../test-7zip.7z hello.txt > /dev/null
          # tar
          tar -cvf ../test-tar.tar hello.txt > /dev/null
          # gzip (single file .gz)
          cp hello.txt hello_gz.txt
          gzip -c hello_gz.txt > ../test-gzip.gz
          # bzip2
          cp hello.txt hello_bz2.txt
          bzip2 -c hello_bz2.txt > ../test-bz2.bz2
          # rar (create inside temporary dir)
          rar a ../test-rar.rar hello.txt > /dev/null || true
          # cab (make cab containing single file)
          mkdir -p cabtmp
          cp hello.txt cabtmp/
          (cd cabtmp && lcab hello.txt ../../test-cabinet.cab) || true

      - name: Run extraction test script
        run: |
          python - <<'PY'
import os, shutil, subprocess, sys, tarfile, zipfile, gzip, bz2, pathlib
from pathlib import Path

TEST_DIR = Path('build/fixtures')
OUT_DIR = Path('build/out')
OUT_DIR.mkdir(parents=True, exist_ok=True)

def extract(path: Path):
    ext = path.suffix.lower()
    name = path.name
    target = OUT_DIR / name.replace(path.suffix, '')
    target.mkdir(exist_ok=True)
    if name.endswith('.tar'):
        with tarfile.open(path, 'r') as tf:
            tf.extractall(target)
    elif name.endswith('.gz') and not name.endswith('.tar.gz'):
        # single file gzip
        with gzip.open(path, 'rb') as f, open(target / 'hello_gz.txt', 'wb') as out:
            out.write(f.read())
    elif name.endswith('.bz2'):
        with bz2.open(path, 'rb') as f, open(target / 'hello_bz2.txt', 'wb') as out:
            out.write(f.read())
    elif ext == '.zip':
        with zipfile.ZipFile(path, 'r') as z:
            z.extractall(target)
    elif ext == '.7z':
        subprocess.run(['7z','x',str(path), f'-o{target}','-y'], check=True, stdout=subprocess.DEVNULL)
    elif ext == '.rar':
        subprocess.run(['unrar','x','-o+','-inul',str(path), str(target)], check=False)
    elif ext == '.cab':
        subprocess.run(['cabextract','-d',str(target), str(path)], check=False)
    else:
        raise SystemExit(f'Unsupported test archive: {path}')
    return target

def verify(dir_path: Path):
    # Find any file containing hello world
    for p in dir_path.rglob('*'):
        if p.is_file():
            try:
                txt = p.read_text(errors='ignore').strip()
            except Exception:
                continue
            if txt == 'hello world':
                return True
    return False

archives = sorted([p for p in Path('build').glob('test-*')])
if not archives:
    raise SystemExit('No test archives found')

failed = []
for a in archives:
    t = extract(a)
    if verify(t):
        print(f'OK {a.name}')
    else:\n        print(f'FAIL {a.name}')
        failed.append(a.name)

if failed:
    print('Failures:', ', '.join(failed))
    sys.exit(1)
print('All archives extracted and validated (hello world).')
PY

      - name: Summary
        if: success()
        run: echo "All archive format tests passed."
