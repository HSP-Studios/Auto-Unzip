name: Windows Archive Extraction Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  test-extraction:
    runs-on: windows-latest
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Launch Auto-Unzip (background)
        shell: pwsh
        run: |
          Start-Process -FilePath python -ArgumentList 'auto-unzip.pyw' -WindowStyle Hidden
          Start-Sleep -Seconds 3

      - name: Prepare test workspace
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Force -Path testing_out | Out-Null
          $TestFiles = @(
            'test-zip.zip',
            'test-7zip.7z',
            'test-rar.rar',
            'test-tar.tar',
            'test-gzip.gz',
            'test-bz2.bz2',
            'test-cabinet.cab'
          )
          foreach ($f in $TestFiles) { Copy-Item "testing/$f" testing_out/ }
          Write-Host 'Copied test archives into testing_out'

      - name: Wait for extraction
        shell: pwsh
        run: Start-Sleep -Seconds 15

      - name: Verify extracted contents
        shell: pwsh
        run: |
          $errors = 0
          $expected = 'hello world'
          function Test-FileContent($Path) {
            if (Test-Path $Path) {
              $content = (Get-Content -Raw -ErrorAction SilentlyContinue $Path).Trim()
              if ($content -eq $expected) { return $true } else { return $false }
            }
            return $false
          }

          # Recursively find all files named TESTFILE.py inside testing_out extraction results
          $extracted = Get-ChildItem -Path testing_out -Recurse -File -Filter TESTFILE.py | Select-Object -ExpandProperty FullName
          if (-not $extracted) {
            Write-Host 'No extracted TESTFILE.py files found.'
            $errors++
          } else {
            foreach ($file in $extracted) {
              if (Test-FileContent $file) {
                Write-Host "[OK] $file contains expected text"
              } else {
                Write-Host "[FAIL] $file missing or incorrect content"; $errors++
              }
            }
          }

          if ($errors -gt 0) {
            Write-Error "$errors archive extraction validations failed."; exit 1
          } else {
            Write-Host 'All archive formats extracted successfully.'
          }

      - name: Cleanup (list outputs)
        if: always()
        shell: pwsh
        run: |
          Write-Host 'Directory tree after test:'
          Get-ChildItem -Path testing_out -Recurse | Format-List -Property FullName,Length

